{"version":3,"file":"static/js/867.c8d93175.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/ListScreen/ListScreen.jsx","service/API.js"],"sourcesContent":["import { ColorRing } from 'react-loader-spinner';\n\nexport const Loader = () => {\n\nreturn (\n<ColorRing\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"blocks-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"blocks-wrapper\"\n  colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n/>\n)}\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: ${p => p.theme.space[3]}px;\n\n  margin: ${p => p.theme.space[4]}px;\n\n  font-size: 16px;\n\n  font-family: 'Roboto-Bold';\n`;\nexport const SearchFormButton = styled.button`\n  width: ${p => p.theme.space[7]}px;\n  height: ${p => p.theme.space[5]}px;\n\n  border-radius: 8px;\n  border: none;\n  cursor: pointer;\n\n  background-color: ${p => p.theme.colors.lightred};\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  font-size: 18px;\n  line-height: 24px;\n  font-family: 'Roboto-Medium';\n\n  text-decoration: none;\n  text-align: center;\n`;\n\nexport const SearchFormInput = styled.input`\n  font-size: 18px;\n  line-height: 24px;\n  font-family: 'Roboto-Medium';\n  padding: ${p => p.theme.space[2]}px;\n\n  text-decoration: none;\n\n  border-radius: 8px;\n  border: none;\n\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n  :enabled {\n    outline-color: ${p => p.theme.colors.red};\n  }\n`;\n","import { useState } from 'react';\nimport {\n  SearchFormInput,\n  SearchFormButtonLabel,\n  SearchFormButton,\n  SearchForm,\n} from './SearchForm.styled';\nimport Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const onChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (query.length < 2 || !query.trim()) {\n      Notiflix.Notify.failure(`Type the show's name`);\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n    e.target.reset();\n  };\n\n  return (\n    <section>\n      <SearchForm className=\"SearchForm\" onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\" className=\"SearchForm-button\">\n          {\n            <SearchFormButtonLabel className=\"SearchForm-button-label\">\n              Search\n            </SearchFormButtonLabel>\n          }\n        </SearchFormButton>\n        <SearchFormInput\n          name=\"searchValue\"\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search TV shows\"\n          onChange={onChange}\n        />\n      </SearchForm>\n    </section>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\r\nimport Notiflix from 'notiflix';\r\nimport {\r\n  MoviesListStyled,\r\n  TitleMovie,\r\n  ListItem,\r\n  Img,\r\n  ScoreText,\r\n  WrapperText,\r\n  Container,\r\n  ErrorMessage,\r\n} from './ListScreen.styled';\r\n\r\nimport img from '../../assets/else.jpg';\r\nimport { searchMovies } from 'service/API';\r\nimport { SearchBar } from 'components/SearchForm/SearchForm';\r\nimport { Loader } from 'components/Loader/Loader';\r\n\r\nconst ListScreen = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState('false');\r\n  const [error, setError] = useState(null);\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const location = useLocation();\r\n\r\n  const query = searchParams.get('query') ?? '';\r\n\r\n  useEffect(() => {\r\n    async function getMoviesBySearch() {\r\n      if (!query) {\r\n        setMovies([]);\r\n        return;\r\n      }\r\n      setIsLoading('true');\r\n      try {\r\n        let cachedQuery = localStorage.getItem('query');\r\n        let response;\r\n        if (cachedQuery && cachedQuery === query) {\r\n          let cachedResponse = JSON.parse(localStorage.getItem('response'));\r\n          response = cachedResponse;\r\n        } else {\r\n          response = await searchMovies(query);\r\n          localStorage.setItem('query', query);\r\n          localStorage.setItem('response', JSON.stringify(response));\r\n        }\r\n\r\n        // if (response === 0) {\r\n        //   console.log(response.rating);\r\n        //   return Promise.reject(\r\n        //     new Error('Sorry, nothing found with this search')\r\n        //   );\r\n        // }\r\n\r\n        if (response.length === 0) {\r\n          Notiflix.Notify.failure('Sorry, nothing found with this search');\r\n        }\r\n        setMovies(p => (p = response));\r\n        setIsLoading('false');\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    }\r\n\r\n    getMoviesBySearch();\r\n  }, [query]);\r\n\r\n  const onSubmit = query => {\r\n    setSearchParams(query !== '' ? { query } : '');\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <Container>\r\n        <SearchBar onSubmit={onSubmit} />\r\n        <MoviesListStyled>\r\n          {movies.map(({ show: { image, id, name, rating } }) => (\r\n            <ListItem key={id}>\r\n              <Link to={`${id}`} state={{ from: location }}>\r\n                <Img src={!image ? img : image.original} alt={name} />\r\n                <WrapperText>\r\n                  <TitleMovie>{name}</TitleMovie>\r\n                  <ScoreText>\r\n                    <b>User score:</b>{' '}\r\n                    {rating.average ?? 'is not available yet...'}\r\n                  </ScoreText>\r\n                </WrapperText>\r\n              </Link>\r\n            </ListItem>\r\n          ))}\r\n        </MoviesListStyled>\r\n      </Container>\r\n      {isLoading === 'true' && <Loader />}\r\n      {error !== null && <ErrorMessage>{error.message}</ErrorMessage>}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ListScreen;\r\n","import axios from 'axios';\r\n// API  - https://api.tvmaze.com/search/shows?q=[PLACE_STRING_FROM_SEARCH_HERE]\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'https://api.tvmaze.com/',\r\n  headers: { 'Content-Type': 'application/json' },\r\n});\r\n\r\nexport const searchMovies = async value => {\r\n  const response = await axiosInstance.get(`search/shows?q=${value}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getMovieDetails = async movieId => {\r\n  const response = await axiosInstance.get(`shows/${movieId}`);\r\n  return response.data;\r\n};\r\n"],"names":["Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","SearchForm","styled","p","theme","space","SearchFormButton","lightred","SearchFormButtonLabel","SearchFormInput","red","SearchBar","onSubmit","useState","query","setQuery","className","e","preventDefault","length","trim","Notiflix","target","reset","type","name","autoComplete","autoFocus","placeholder","onChange","currentTarget","value","toLowerCase","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","get","useEffect","cachedQuery","localStorage","getItem","cachedResponse","JSON","parse","response","searchMovies","setItem","stringify","getMoviesBySearch","map","show","image","id","rating","to","state","from","src","original","img","alt","average","message","axiosInstance","axios","baseURL","headers","data","getMovieDetails","movieId"],"sourceRoot":""}